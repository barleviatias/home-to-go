{"ast":null,"code":"import { storageService } from './asyncStorageService';\nimport { userService } from '../services/user-service';\nimport { tripService } from '../services/trip-service';\nimport { utilService } from '../services/util-service'; // import axios from 'axios'\n// import { httpService } from './http.service'\n// const SCORE_FOR_REVIEW = 10\n// const IMG_API_KEY = '20031048-f5c2a8cb9ae058a58da123891'\n\nexport const orderService = {\n  query,\n  getById,\n  remove,\n  update,\n  add,\n  getHostOrders\n};\nwindow.orderService = orderService;\n\nfunction query(trip) {\n  return storageService.query('order', trip); // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\n  // return httpService.get(`order${queryStr}`)\n}\n\nfunction getById(orderId) {\n  return storageService.get('order', orderId); // return httpService.get(`order/${orderId}`)\n}\n\nfunction remove(orderId) {\n  return storageService.remove('order', orderId); // return httpService.delete(`order/${orderId}`)\n}\n\nasync function update(order) {\n  return storageService.put('order', order); // return await httpService.put(`order/${order._id}`, order)\n  // Handle case in which admin updates other order's details\n  // if (getLoggedinOrder()._id === order._id) _saveLocalOrder(order)\n}\n\nasync function add(trip, stay, loggedInUser) {\n  const order = {\n    _id: utilService.makeId(),\n    createdAt: Date.now(),\n    endDate: trip.time.checkOut,\n    startDate: trip.time.checkIn,\n    guests: trip.guests,\n    host: stay.host,\n    status: 'pending',\n    stay: {\n      _id: stay._id,\n      name: stay.name,\n      price: stay.price\n    },\n    totalPrice: trip.totalPrice,\n    user: loggedInUser\n  };\n  tripService.remove();\n  return storageService.post('order', order); // order.imgUrl = await getOrderImage(order.name)\n  // order.msgs = []\n  // return await httpService.post(`order`, order)\n  // Handle case in which admin updates other order's details\n  // if (getLoggedinOrder()._id === order._id) _saveLocalOrder(order)\n}\n\nasync function getHostOrders(userId) {\n  var orders = await storageService.query('order');\n  orders = orders.filter(order => {\n    return order.host._id === userId;\n  });\n  return orders;\n}","map":{"version":3,"sources":["C:/Users/Bar-PC/Desktop/sprint 4/src/services/order-service.js"],"names":["storageService","userService","tripService","utilService","orderService","query","getById","remove","update","add","getHostOrders","window","trip","orderId","get","order","put","stay","loggedInUser","_id","makeId","createdAt","Date","now","endDate","time","checkOut","startDate","checkIn","guests","host","status","name","price","totalPrice","user","post","userId","orders","filter"],"mappings":"AAAA,SAASA,cAAT,QAA+B,uBAA/B;AACA,SAAQC,WAAR,QAA0B,0BAA1B;AACA,SAAQC,WAAR,QAA0B,0BAA1B;AACA,SAAQC,WAAR,QAA0B,0BAA1B,C,CAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,KADwB;AAExBC,EAAAA,OAFwB;AAGxBC,EAAAA,MAHwB;AAIxBC,EAAAA,MAJwB;AAKxBC,EAAAA,GALwB;AAMxBC,EAAAA;AANwB,CAArB;AASPC,MAAM,CAACP,YAAP,GAAsBA,YAAtB;;AAEA,SAASC,KAAT,CAAeO,IAAf,EAAqB;AACjB,SAAOZ,cAAc,CAACK,KAAf,CAAqB,OAArB,EAA8BO,IAA9B,CAAP,CADiB,CAGjB;AACA;AACH;;AAED,SAASN,OAAT,CAAiBO,OAAjB,EAA0B;AACtB,SAAOb,cAAc,CAACc,GAAf,CAAmB,OAAnB,EAA4BD,OAA5B,CAAP,CADsB,CAGtB;AACH;;AAED,SAASN,MAAT,CAAgBM,OAAhB,EAAyB;AACrB,SAAOb,cAAc,CAACO,MAAf,CAAsB,OAAtB,EAA+BM,OAA/B,CAAP,CADqB,CAGrB;AACH;;AAED,eAAeL,MAAf,CAAsBO,KAAtB,EAA6B;AACzB,SAAOf,cAAc,CAACgB,GAAf,CAAmB,OAAnB,EAA4BD,KAA5B,CAAP,CADyB,CAGzB;AACA;AACA;AACH;;AAED,eAAeN,GAAf,CAAmBG,IAAnB,EAAyBK,IAAzB,EAAgCC,YAAhC,EAA8C;AAC1C,QAAMH,KAAK,GAAG;AACVI,IAAAA,GAAG,EAAEhB,WAAW,CAACiB,MAAZ,EADK;AAEVC,IAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAFD;AAGVC,IAAAA,OAAO,EAAEZ,IAAI,CAACa,IAAL,CAAUC,QAHT;AAIVC,IAAAA,SAAS,EAAEf,IAAI,CAACa,IAAL,CAAUG,OAJX;AAKVC,IAAAA,MAAM,EAAEjB,IAAI,CAACiB,MALH;AAMVC,IAAAA,IAAI,EAAEb,IAAI,CAACa,IAND;AAOVC,IAAAA,MAAM,EAAE,SAPE;AAQVd,IAAAA,IAAI,EAAE;AAACE,MAAAA,GAAG,EAAEF,IAAI,CAACE,GAAX;AAAiBa,MAAAA,IAAI,EAAEf,IAAI,CAACe,IAA5B;AAAmCC,MAAAA,KAAK,EAAEhB,IAAI,CAACgB;AAA/C,KARI;AASVC,IAAAA,UAAU,EAAEtB,IAAI,CAACsB,UATP;AAUVC,IAAAA,IAAI,EAAEjB;AAVI,GAAd;AAYAhB,EAAAA,WAAW,CAACK,MAAZ;AACA,SAAOP,cAAc,CAACoC,IAAf,CAAoB,OAApB,EAA6BrB,KAA7B,CAAP,CAd0C,CAgB1C;AACA;AACA;AACA;AACA;AACH;;AAGD,eAAeL,aAAf,CAA6B2B,MAA7B,EAAqC;AACjC,MAAIC,MAAM,GAAG,MAAMtC,cAAc,CAACK,KAAf,CAAqB,OAArB,CAAnB;AACAiC,EAAAA,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcxB,KAAK,IAAI;AAC5B,WAAOA,KAAK,CAACe,IAAN,CAAWX,GAAX,KAAmBkB,MAA1B;AACH,GAFQ,CAAT;AAGA,SAAOC,MAAP;AAEH","sourcesContent":["import { storageService } from './asyncStorageService'\r\nimport {userService} from '../services/user-service'\r\nimport {tripService} from '../services/trip-service'\r\nimport {utilService} from '../services/util-service'\r\n\r\n// import axios from 'axios'\r\n// import { httpService } from './http.service'\r\n// const SCORE_FOR_REVIEW = 10\r\n// const IMG_API_KEY = '20031048-f5c2a8cb9ae058a58da123891'\r\n\r\nexport const orderService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    update,\r\n    add,\r\n    getHostOrders\r\n}\r\n\r\nwindow.orderService = orderService\r\n\r\nfunction query(trip) {\r\n    return storageService.query('order', trip)\r\n\r\n    // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\r\n    // return httpService.get(`order${queryStr}`)\r\n}\r\n\r\nfunction getById(orderId) {\r\n    return storageService.get('order', orderId)\r\n\r\n    // return httpService.get(`order/${orderId}`)\r\n}\r\n\r\nfunction remove(orderId) {\r\n    return storageService.remove('order', orderId)\r\n\r\n    // return httpService.delete(`order/${orderId}`)\r\n}\r\n\r\nasync function update(order) {\r\n    return storageService.put('order', order)\r\n\r\n    // return await httpService.put(`order/${order._id}`, order)\r\n    // Handle case in which admin updates other order's details\r\n    // if (getLoggedinOrder()._id === order._id) _saveLocalOrder(order)\r\n}\r\n\r\nasync function add(trip, stay , loggedInUser) {\r\n    const order = {\r\n        _id: utilService.makeId(),\r\n        createdAt: Date.now(),\r\n        endDate: trip.time.checkOut,\r\n        startDate: trip.time.checkIn,\r\n        guests: trip.guests,\r\n        host: stay.host,\r\n        status: 'pending',\r\n        stay: {_id: stay._id , name: stay.name , price: stay.price},\r\n        totalPrice: trip.totalPrice,\r\n        user: loggedInUser\r\n    }\r\n    tripService.remove()\r\n    return storageService.post('order', order)\r\n\r\n    // order.imgUrl = await getOrderImage(order.name)\r\n    // order.msgs = []\r\n    // return await httpService.post(`order`, order)\r\n    // Handle case in which admin updates other order's details\r\n    // if (getLoggedinOrder()._id === order._id) _saveLocalOrder(order)\r\n}\r\n\r\n\r\nasync function getHostOrders(userId) {\r\n    var orders = await storageService.query('order')\r\n    orders = orders.filter(order => {\r\n        return order.host._id === userId\r\n    })\r\n    return orders\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}