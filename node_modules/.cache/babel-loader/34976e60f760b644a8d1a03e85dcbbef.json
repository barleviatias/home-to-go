{"ast":null,"code":"import { storageService } from './asyncStorageService'; // import axios from 'axios'\n// import { httpService } from './http.service'\n// const SCORE_FOR_REVIEW = 10\n// const IMG_API_KEY = '20031048-f5c2a8cb9ae058a58da123891'\n\nexport const stayService = {\n  query,\n  getById,\n  remove,\n  update,\n  add,\n  getTopRatedStays,\n  getNearbyStays,\n  getHostStays,\n  getUserWhishlist // getStayImage,\n  // getPriceData,\n  // getDateData\n\n};\nwindow.stayService = stayService; // Note: due to async, must run one by one...\n// stayService.signup({fullname: 'Puki Norma', stayname: 'stay1', password:'123',score: 100, isAdmin: false})\n// stayService.signup({fullname: 'Master Adminov', stayname: 'admin', password:'123', score: 100, isAdmin: true})\n// stayService.signup({fullname: 'Muki G', stayname: 'muki', password:'123', score: 100})\n\nfunction query(trip) {\n  return storageService.query('stay', trip); // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\n  // return httpService.get(`stay${queryStr}`)\n}\n\nfunction getById(stayId) {\n  return storageService.get('stay', stayId); // return httpService.get(`stay/${stayId}`)\n}\n\nfunction remove(stayId) {\n  return storageService.remove('stay', stayId); // return httpService.delete(`stay/${stayId}`)\n}\n\nasync function update(stay) {\n  // const currStay = {\n  // \tname: stay.name,\n  // \timgUrls: stay.imgUrls,\n  // \tprice: stay.price,\n  // \tdesc: stay.desc,\n  // \tcapacity: 8,\n  // \tfavorites: [\n  // \t\t{\n  // \t\t\tuserId: 'u109',\n  // \t\t},\n  // \t],\n  // \tamenities: getAmeneties(stay.amenities),\n  // \tstayType: 'entire place',\n  // \tpropertyType: 'loft',\n  // \thost: {\n  // \t\t_id: 'u101',\n  // \t\tfullname: 'Mor Levi',\n  // \t\timgUrl: 'https://randomuser.me/api/portraits/men/1.jpg',\n  // \t},\n  // \tloc: {\n  // \t\tcountry: 'France',\n  // \t\tcountryCode: 'PT',\n  // \t\taddress: 'Paris, France',\n  // \t\tlat: -8.61308,\n  // \t\tlng: 41.1413,\n  // \t},\n  // \treviews: [],\n  // };\n  stay.amenities = getAmeneties(stay.amenities);\n  return storageService.put('stay', stay); // return await httpService.put(`stay/${stay._id}`, stay)\n  // Handle case in which admin updates other stay's details\n  // if (getLoggedinStay()._id === stay._id) _saveLocalStay(stay)\n}\n\nasync function add(stay) {\n  const currStay = {\n    name: stay.name,\n    imgUrls: stay.imgUrls,\n    price: stay.price,\n    desc: stay.desc,\n    capacity: 8,\n    favorites: [{\n      userId: 'u109'\n    }],\n    amenities: getAmeneties(stay.amenities),\n    stayType: 'entire place',\n    propertyType: 'loft',\n    host: {\n      _id: 'u101',\n      fullname: 'Mor Levi',\n      imgUrl: 'https://randomuser.me/api/portraits/men/1.jpg'\n    },\n    loc: {\n      country: 'France',\n      countryCode: 'PT',\n      address: 'Paris, France',\n      lat: -8.61308,\n      lng: 41.1413\n    },\n    reviews: []\n  };\n  return storageService.post('stay', currStay); // stay.imgUrl = await getStayImage(stay.name)\n  // stay.msgs = []\n  // return await httpService.post(`stay`, stay)\n  // Handle case in which admin updates other stay's details\n  // if (getLoggedinStay()._id === stay._id) _saveLocalStay(stay)\n} // async function getTopRatedStays(stays) {\n//     stays = stays.map(stay => {\n//         stay.avgRate = _getRate(stay);\n//         return stay\n//     })\n//     stays.sort(function (a, b) {\n//         return b.avgRate - a.avgRate\n//     })\n//     return stays.slice(0, 4)\n//     // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\n//     // return httpService.get(`stay${queryStr}`)\n// }\n\n\nasync function getTopRatedStays() {\n  var stays = await storageService.query('stay');\n  stays = stays.map(stay => {\n    stay.avgRate = _getRate(stay);\n    return stay;\n  });\n  stays.sort(function (a, b) {\n    return b.avgRate - a.avgRate;\n  });\n  return stays.slice(0, 4); // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\n  // return httpService.get(`stay${queryStr}`)\n}\n\nfunction _getRate(stay) {\n  const rates = stay.reviews.map(review => review.avgRate);\n  const sum = rates.reduce((acc, rate) => {\n    acc += rate;\n    return acc;\n  }, 0);\n  return sum / rates.length;\n}\n\nasync function getNearbyStays(location) {\n  var stays = await storageService.query('stay');\n  stays = stays.filter(stay => {\n    return stay.loc.address.toUpperCase().includes(location.toUpperCase());\n  });\n  return stays.slice(0, 4); // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\n  // return httpService.get(`stay${queryStr}`)\n}\n\nasync function getHostStays(userId) {\n  var stays = await storageService.query('stay');\n  stays = stays.filter(stay => {\n    return stay.host._id === userId;\n  });\n  return stays; // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\n  // return httpService.get(`stay${queryStr}`)\n}\n\nasync function getUserWhishlist(userId) {\n  var stays = await storageService.query('stay');\n  stays = stays.filter(stay => {\n    return stay._id === stayId;\n  });\n  return stays; // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\n  // return httpService.get(`stay${queryStr}`)\n}\n\nfunction getAmeneties(amenities) {\n  const currAmenities = [];\n\n  for (const key in amenities) {\n    if (amenities[key]) {\n      var str = key;\n      var res = str.replace('_', ' ');\n      currAmenities.push(res);\n    }\n  }\n\n  console.log('currAmenities', currAmenities);\n  return currAmenities;\n}","map":{"version":3,"sources":["C:/Users/Bar-PC/Desktop/sprint 4/src/services/stay-service.js"],"names":["storageService","stayService","query","getById","remove","update","add","getTopRatedStays","getNearbyStays","getHostStays","getUserWhishlist","window","trip","stayId","get","stay","amenities","getAmeneties","put","currStay","name","imgUrls","price","desc","capacity","favorites","userId","stayType","propertyType","host","_id","fullname","imgUrl","loc","country","countryCode","address","lat","lng","reviews","post","stays","map","avgRate","_getRate","sort","a","b","slice","rates","review","sum","reduce","acc","rate","length","location","filter","toUpperCase","includes","currAmenities","key","str","res","replace","push","console","log"],"mappings":"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","sourcesContent":["import { storageService } from './asyncStorageService';\r\n\r\n// import axios from 'axios'\r\n// import { httpService } from './http.service'\r\n// const SCORE_FOR_REVIEW = 10\r\n// const IMG_API_KEY = '20031048-f5c2a8cb9ae058a58da123891'\r\n\r\nexport const stayService = {\r\n\tquery,\r\n\tgetById,\r\n\tremove,\r\n\tupdate,\r\n\tadd,\r\n\tgetTopRatedStays,\r\n\tgetNearbyStays,\r\n\tgetHostStays,\r\n\tgetUserWhishlist\r\n\t// getStayImage,\r\n\t// getPriceData,\r\n\t// getDateData\r\n};\r\n\r\nwindow.stayService = stayService;\r\n// Note: due to async, must run one by one...\r\n// stayService.signup({fullname: 'Puki Norma', stayname: 'stay1', password:'123',score: 100, isAdmin: false})\r\n// stayService.signup({fullname: 'Master Adminov', stayname: 'admin', password:'123', score: 100, isAdmin: true})\r\n// stayService.signup({fullname: 'Muki G', stayname: 'muki', password:'123', score: 100})\r\n\r\nfunction query(trip) {\r\n\treturn storageService.query('stay', trip);\r\n\r\n\t// var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\r\n\t// return httpService.get(`stay${queryStr}`)\r\n}\r\n\r\nfunction getById(stayId) {\r\n\treturn storageService.get('stay', stayId);\r\n\t// return httpService.get(`stay/${stayId}`)\r\n}\r\n\r\nfunction remove(stayId) {\r\n\treturn storageService.remove('stay', stayId);\r\n\t// return httpService.delete(`stay/${stayId}`)\r\n}\r\n\r\nasync function update(stay) {\r\n    // const currStay = {\r\n\t// \tname: stay.name,\r\n\t// \timgUrls: stay.imgUrls,\r\n\t// \tprice: stay.price,\r\n\t// \tdesc: stay.desc,\r\n\t// \tcapacity: 8,\r\n\t// \tfavorites: [\r\n\t// \t\t{\r\n\t// \t\t\tuserId: 'u109',\r\n\t// \t\t},\r\n\t// \t],\r\n\t// \tamenities: getAmeneties(stay.amenities),\r\n\t// \tstayType: 'entire place',\r\n\t// \tpropertyType: 'loft',\r\n\t// \thost: {\r\n\t// \t\t_id: 'u101',\r\n\t// \t\tfullname: 'Mor Levi',\r\n\t// \t\timgUrl: 'https://randomuser.me/api/portraits/men/1.jpg',\r\n\t// \t},\r\n\t// \tloc: {\r\n\t// \t\tcountry: 'France',\r\n\t// \t\tcountryCode: 'PT',\r\n\t// \t\taddress: 'Paris, France',\r\n\t// \t\tlat: -8.61308,\r\n\t// \t\tlng: 41.1413,\r\n\t// \t},\r\n\t// \treviews: [],\r\n\t// };\r\n    stay.amenities=getAmeneties( stay.amenities)\r\n\treturn storageService.put('stay', stay);\r\n\t// return await httpService.put(`stay/${stay._id}`, stay)\r\n\t// Handle case in which admin updates other stay's details\r\n\t// if (getLoggedinStay()._id === stay._id) _saveLocalStay(stay)\r\n}\r\n\r\nasync function add(stay) {\r\n\tconst currStay = {\r\n\t\tname: stay.name,\r\n\t\timgUrls: stay.imgUrls,\r\n\t\tprice: stay.price,\r\n\t\tdesc: stay.desc,\r\n\t\tcapacity: 8,\r\n\t\tfavorites: [\r\n\t\t\t{\r\n\t\t\t\tuserId: 'u109',\r\n\t\t\t},\r\n\t\t],\r\n\t\tamenities: getAmeneties(stay.amenities),\r\n\t\tstayType: 'entire place',\r\n\t\tpropertyType: 'loft',\r\n\t\thost: {\r\n\t\t\t_id: 'u101',\r\n\t\t\tfullname: 'Mor Levi',\r\n\t\t\timgUrl: 'https://randomuser.me/api/portraits/men/1.jpg',\r\n\t\t},\r\n\t\tloc: {\r\n\t\t\tcountry: 'France',\r\n\t\t\tcountryCode: 'PT',\r\n\t\t\taddress: 'Paris, France',\r\n\t\t\tlat: -8.61308,\r\n\t\t\tlng: 41.1413,\r\n\t\t},\r\n\t\treviews: [],\r\n\t};\r\n\r\n\treturn storageService.post('stay', currStay);\r\n\t// stay.imgUrl = await getStayImage(stay.name)\r\n\t// stay.msgs = []\r\n\t// return await httpService.post(`stay`, stay)\r\n\t// Handle case in which admin updates other stay's details\r\n\t// if (getLoggedinStay()._id === stay._id) _saveLocalStay(stay)\r\n}\r\n\r\n// async function getTopRatedStays(stays) {\r\n//     stays = stays.map(stay => {\r\n//         stay.avgRate = _getRate(stay);\r\n//         return stay\r\n//     })\r\n//     stays.sort(function (a, b) {\r\n//         return b.avgRate - a.avgRate\r\n//     })\r\n//     return stays.slice(0, 4)\r\n//     // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\r\n//     // return httpService.get(`stay${queryStr}`)\r\n// }\r\nasync function getTopRatedStays() {\r\n\tvar stays = await storageService.query('stay');\r\n\tstays = stays.map((stay) => {\r\n\t\tstay.avgRate = _getRate(stay);\r\n\t\treturn stay;\r\n\t});\r\n\tstays.sort(function (a, b) {\r\n\t\treturn b.avgRate - a.avgRate;\r\n\t});\r\n\treturn stays.slice(0, 4);\r\n\t// var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\r\n\t// return httpService.get(`stay${queryStr}`)\r\n}\r\n\r\nfunction _getRate(stay) {\r\n\tconst rates = stay.reviews.map((review) => review.avgRate);\r\n\tconst sum = rates.reduce((acc, rate) => {\r\n\t\tacc += rate;\r\n\t\treturn acc;\r\n\t}, 0);\r\n\treturn sum / rates.length;\r\n}\r\n\r\nasync function getNearbyStays(location) {\r\n\tvar stays = await storageService.query('stay');\r\n\tstays = stays.filter((stay) => {\r\n\t\treturn stay.loc.address.toUpperCase().includes(location.toUpperCase());\r\n\t});\r\n\treturn stays.slice(0, 4);\r\n\t// var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\r\n\t// return httpService.get(`stay${queryStr}`)\r\n}\r\n\r\nasync function getHostStays(userId) {\r\n\tvar stays = await storageService.query('stay');\r\n\tstays = stays.filter((stay) => {\r\n\t\treturn stay.host._id === userId;\r\n\t});\r\n\treturn stays;\r\n\r\n\t// var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\r\n\t// return httpService.get(`stay${queryStr}`)\r\n}\r\n\r\nasync function getUserWhishlist(userId) {\r\n\tvar stays = await storageService.query('stay');\r\n\tstays = stays.filter((stay) => {\r\n\t\treturn stay._id === stayId;\r\n\t});\r\n\treturn stays;\r\n\r\n\t// var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\r\n\t// return httpService.get(`stay${queryStr}`)\r\n}\r\n\r\nfunction getAmeneties(amenities) {\r\n\tconst currAmenities = [];\r\n\tfor (const key in amenities) {\r\n\t\tif (amenities[key]) {\r\n\t\t\tvar str = key;\r\n\t\t\tvar res = str.replace('_', ' ');\r\n\t\t\tcurrAmenities.push(res);\r\n\t\t}\r\n\t}\r\n\tconsole.log('currAmenities', currAmenities);\r\n\treturn currAmenities;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}