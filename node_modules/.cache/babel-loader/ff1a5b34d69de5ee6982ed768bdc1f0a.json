{"ast":null,"code":"import { storageService } from './asyncStorageService';\nimport { userService } from '../services/user-service';\nimport { tripService } from '../services/trip-service';\nimport { utilService } from '../services/util-service'; // import axios from 'axios'\n// import { httpService } from './http.service'\n// const SCORE_FOR_REVIEW = 10\n// const IMG_API_KEY = '20031048-f5c2a8cb9ae058a58da123891'\n\nexport const orderService = {\n  query,\n  // getById,\n  remove,\n  // update,\n  add,\n  getHostOrders,\n  getUserOrders\n};\nwindow.orderService = orderService;\n\nasync function query(user = {\n  id: null,\n  type: 'all'\n}) {\n  var orders = await storageService.query('order');\n  orders = _filterByUser(user, orders);\n  return orders; // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\n  // return httpService.get(`order${queryStr}`)\n}\n\nfunction _filterByUser(user, orders) {\n  if (user.type === 'host') {\n    return orders.filter(order => {\n      return order.host._id === user.id;\n    });\n  } else if (user.type === 'user') {\n    return orders.filter(order => {\n      return order.user._id === user.id;\n    });\n  } else return orders;\n}\n\nasync function add(trip, stay, loggedInUser) {\n  const order = {\n    _id: utilService.makeId(),\n    createdAt: Date.now(),\n    endDate: trip.time.checkOut,\n    startDate: trip.time.checkIn,\n    guests: trip.guests,\n    host: stay.host,\n    status: 'pending',\n    stay: {\n      _id: stay._id,\n      name: stay.name,\n      price: stay.price\n    },\n    totalPrice: trip.totalPrice,\n    user: loggedInUser\n  };\n  tripService.remove();\n  return storageService.post('order', order); // order.imgUrl = await getOrderImage(order.name)\n  // order.msgs = []\n  // return await httpService.post(`order`, order)\n  // Handle case in which admin updates other order's details\n  // if (getLoggedinOrder()._id === order._id) _saveLocalOrder(order)\n}\n\nasync function getHostOrders(userId) {\n  var orders = await storageService.query('order');\n  orders = orders.filter(order => {\n    return order.host._id === userId;\n  });\n  return orders;\n}\n\nasync function getUserOrders(userId) {\n  var orders = await storageService.query('order');\n  orders = orders.filter(order => {\n    return order.host._id === userId;\n  });\n  return orders;\n}\n\nfunction remove(orderId) {\n  return storageService.remove('order', orderId); // return httpService.delete(`order/${orderId}`)\n} // SERVICE TO BACKEND\n// function query(trip) {\n//     return storageService.query('order', userId)\n//     // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\n//     // return httpService.get(`order${queryStr}`)\n// }\n// function getById(orderId) {\n//     return storageService.get('order', orderId)\n//     // return httpService.get(`order/${orderId}`)\n// }\n// async function update(order) {\n//     return storageService.put('order', order)\n//     // return await httpService.put(`order/${order._id}`, order)\n//     // Handle case in which admin updates other order's details\n//     // if (getLoggedinOrder()._id === order._id) _saveLocalOrder(order)\n// }","map":{"version":3,"sources":["C:/Users/Bar-PC/Desktop/sprint 4/src/services/order-service.js"],"names":["storageService","userService","tripService","utilService","orderService","query","remove","add","getHostOrders","getUserOrders","window","user","id","type","orders","_filterByUser","filter","order","host","_id","trip","stay","loggedInUser","makeId","createdAt","Date","now","endDate","time","checkOut","startDate","checkIn","guests","status","name","price","totalPrice","post","userId","orderId"],"mappings":"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","sourcesContent":["import { storageService } from './asyncStorageService'\r\nimport { userService } from '../services/user-service'\r\nimport { tripService } from '../services/trip-service'\r\nimport { utilService } from '../services/util-service'\r\n\r\n// import axios from 'axios'\r\n// import { httpService } from './http.service'\r\n// const SCORE_FOR_REVIEW = 10\r\n// const IMG_API_KEY = '20031048-f5c2a8cb9ae058a58da123891'\r\n\r\nexport const orderService = {\r\n    query,\r\n    // getById,\r\n    remove,\r\n    // update,\r\n    add,\r\n    getHostOrders,\r\n    getUserOrders\r\n}\r\n\r\nwindow.orderService = orderService\r\n\r\nasync function query(user = { id: null, type: 'all' }) {\r\n    var orders = await storageService.query('order')\r\n    orders = _filterByUser(user, orders);\r\n    return orders;\r\n\r\n    // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\r\n    // return httpService.get(`order${queryStr}`)\r\n}\r\n\r\nfunction _filterByUser(user, orders) {\r\n    if (user.type === 'host') {\r\n        return orders.filter(order => {\r\n            return order.host._id === user.id;\r\n        })\r\n    }\r\n    else if (user.type === 'user') {\r\n        return orders.filter(order => {\r\n            return order.user._id === user.id;\r\n        })\r\n    }\r\n    else return orders;\r\n}\r\n\r\n\r\n\r\nasync function add(trip, stay, loggedInUser) {\r\n    const order = {\r\n        _id: utilService.makeId(),\r\n        createdAt: Date.now(),\r\n        endDate: trip.time.checkOut,\r\n        startDate: trip.time.checkIn,\r\n        guests: trip.guests,\r\n        host: stay.host,\r\n        status: 'pending',\r\n        stay: { _id: stay._id, name: stay.name, price: stay.price },\r\n        totalPrice: trip.totalPrice,\r\n        user: loggedInUser\r\n    }\r\n    tripService.remove()\r\n    return storageService.post('order', order)\r\n\r\n    // order.imgUrl = await getOrderImage(order.name)\r\n    // order.msgs = []\r\n    // return await httpService.post(`order`, order)\r\n    // Handle case in which admin updates other order's details\r\n    // if (getLoggedinOrder()._id === order._id) _saveLocalOrder(order)\r\n}\r\n\r\n\r\nasync function getHostOrders(userId) {\r\n    var orders = await storageService.query('order')\r\n    orders = orders.filter(order => {\r\n        return order.host._id === userId\r\n    })\r\n    return orders\r\n}\r\n\r\nasync function getUserOrders(userId) {\r\n    var orders = await storageService.query('order')\r\n    orders = orders.filter(order => {\r\n        return order.host._id === userId\r\n    })\r\n    return orders\r\n}\r\n\r\nfunction remove(orderId) {\r\n    return storageService.remove('order', orderId)\r\n\r\n    // return httpService.delete(`order/${orderId}`)\r\n}\r\n\r\n\r\n\r\n\r\n// SERVICE TO BACKEND\r\n\r\n// function query(trip) {\r\n//     return storageService.query('order', userId)\r\n\r\n//     // var queryStr = `?availability=${filterBy.availability}&searchTxt=${filterBy.searchTxt}&sortBy=${filterBy.sortBy}&type=${filterBy.type}`\r\n//     // return httpService.get(`order${queryStr}`)\r\n// }\r\n\r\n// function getById(orderId) {\r\n//     return storageService.get('order', orderId)\r\n\r\n//     // return httpService.get(`order/${orderId}`)\r\n// }\r\n\r\n// async function update(order) {\r\n//     return storageService.put('order', order)\r\n\r\n//     // return await httpService.put(`order/${order._id}`, order)\r\n//     // Handle case in which admin updates other order's details\r\n//     // if (getLoggedinOrder()._id === order._id) _saveLocalOrder(order)\r\n// }\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}