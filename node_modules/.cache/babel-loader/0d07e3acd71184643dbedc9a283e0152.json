{"ast":null,"code":"import { storageService } from './asyncStorageService'; // import { httpService } from './http.service.js';\n\nexport const userService = {\n  login,\n  logout,\n  signup,\n  getById,\n  // getUsers,\n  // remove,\n  update // getLoggedinUser\n\n};\nwindow.userService = userService;\n\nasync function login(userCred) {\n  const users = await storageService.query('user');\n  const user = users.find(user => user.username === userCred.username);\n  return _saveLocalUser(user); // const user = await httpService.post('auth/login', userCred)\n  // if (user) return _saveLocalUser(user)\n}\n\nasync function signup(userCred) {\n  const user = await storageService.post('user', userCred); // const user = await httpService.post('auth/signup', userCred)\n\n  return _saveLocalUser(user);\n}\n\nasync function logout() {\n  sessionStorage.clear(); // return await httpService.post('auth/logout')\n}\n\nasync function update(user) {\n  // return _saveLocalUser(user);\n  return storageService.put('user', user); // return await httpService.put(`stay/${stay._id}`, stay)\n  // Handle case in which admin updates other stay's details\n  // if (getLoggedinStay()._id === stay._id) _saveLocalStay(stay)\n}\n\nfunction getById(userId) {\n  return storageService.get('user', userId);\n}\n\nfunction _saveLocalUser(user) {\n  sessionStorage.setItem('loggedinUser', JSON.stringify(user));\n  return user;\n} // import { storageService } from './storage.service.js';\n// import axios from 'axios';\n// const STORAGE_KEY = 'user';\n// const BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:3030/api'\n// export const userService = {\n//     login,\n//     getLoggedinUser,\n//     signup\n// }\n// function login(credentials) {\n//     return axios.post(`${BASE_URL}/login`, credentials).then(res => res.data)\n//         .then(user => {\n//             storageService.save(STORAGE_KEY, user);\n//             return user;\n//         })\n// }\n// function signup(credentials) {\n//     return axios.post(`${BASE_URL}/signup`, credentials).then(res => res.data)\n//         .then(user => {\n//             storageService.save(STORAGE_KEY, user);\n//             return user\n//         })\n// }\n// function getLoggedinUser() {\n//     return storageService.load(STORAGE_KEY);\n// }","map":{"version":3,"sources":["C:/Users/Bar-PC/Desktop/sprint 4/src/services/user-service.js"],"names":["storageService","userService","login","logout","signup","getById","update","window","userCred","users","query","user","find","username","_saveLocalUser","post","sessionStorage","clear","put","userId","get","setItem","JSON","stringify"],"mappings":"AAAA,SAASA,cAAT,QAA+B,uBAA/B,C,CACA;;AAGA,OAAO,MAAMC,WAAW,GAAG;AAC1BC,EAAAA,KAD0B;AAE1BC,EAAAA,MAF0B;AAG1BC,EAAAA,MAH0B;AAI1BC,EAAAA,OAJ0B;AAK1B;AACA;AACAC,EAAAA,MAP0B,CAQ1B;;AAR0B,CAApB;AAWPC,MAAM,CAACN,WAAP,GAAqBA,WAArB;;AAEA,eAAeC,KAAf,CAAqBM,QAArB,EAA+B;AAC9B,QAAMC,KAAK,GAAG,MAAMT,cAAc,CAACU,KAAf,CAAqB,MAArB,CAApB;AACA,QAAMC,IAAI,GAAGF,KAAK,CAACG,IAAN,CAAYD,IAAD,IAAUA,IAAI,CAACE,QAAL,KAAkBL,QAAQ,CAACK,QAAhD,CAAb;AACA,SAAOC,cAAc,CAACH,IAAD,CAArB,CAH8B,CAI9B;AACA;AACA;;AAED,eAAeP,MAAf,CAAsBI,QAAtB,EAAgC;AAC/B,QAAMG,IAAI,GAAG,MAAMX,cAAc,CAACe,IAAf,CAAoB,MAApB,EAA4BP,QAA5B,CAAnB,CAD+B,CAE/B;;AACA,SAAOM,cAAc,CAACH,IAAD,CAArB;AACA;;AAED,eAAeR,MAAf,GAAwB;AACvBa,EAAAA,cAAc,CAACC,KAAf,GADuB,CAEvB;AACA;;AACD,eAAeX,MAAf,CAAsBK,IAAtB,EAA4B;AAC3B;AACG,SAAOX,cAAc,CAACkB,GAAf,CAAmB,MAAnB,EAA2BP,IAA3B,CAAP,CAFwB,CAGxB;AACA;AACA;AACH;;AACD,SAASN,OAAT,CAAiBc,MAAjB,EAAyB;AACrB,SAAOnB,cAAc,CAACoB,GAAf,CAAmB,MAAnB,EAA2BD,MAA3B,CAAP;AACH;;AACD,SAASL,cAAT,CAAwBH,IAAxB,EAA8B;AAC7BK,EAAAA,cAAc,CAACK,OAAf,CAAuB,cAAvB,EAAuCC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAAvC;AACA,SAAOA,IAAP;AACA,C,CAED;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import { storageService } from './asyncStorageService';\r\n// import { httpService } from './http.service.js';\r\n\r\n\r\nexport const userService = {\r\n\tlogin,\r\n\tlogout,\r\n\tsignup,\r\n\tgetById,\r\n\t// getUsers,\r\n\t// remove,\r\n\tupdate,\r\n\t// getLoggedinUser\r\n};\r\n\r\nwindow.userService = userService;\r\n\r\nasync function login(userCred) {\r\n\tconst users = await storageService.query('user');\r\n\tconst user = users.find((user) => user.username === userCred.username);\r\n\treturn _saveLocalUser(user);\r\n\t// const user = await httpService.post('auth/login', userCred)\r\n\t// if (user) return _saveLocalUser(user)\r\n}\r\n\r\nasync function signup(userCred) {\r\n\tconst user = await storageService.post('user', userCred);\r\n\t// const user = await httpService.post('auth/signup', userCred)\r\n\treturn _saveLocalUser(user);\r\n}\r\n\r\nasync function logout() {\r\n\tsessionStorage.clear();\r\n\t// return await httpService.post('auth/logout')\r\n}\r\nasync function update(user) {\r\n\t// return _saveLocalUser(user);\r\n    return storageService.put('user', user)\r\n    // return await httpService.put(`stay/${stay._id}`, stay)\r\n    // Handle case in which admin updates other stay's details\r\n    // if (getLoggedinStay()._id === stay._id) _saveLocalStay(stay)\r\n}\r\nfunction getById(userId) {\r\n    return storageService.get('user', userId)\r\n}\r\nfunction _saveLocalUser(user) {\r\n\tsessionStorage.setItem('loggedinUser', JSON.stringify(user));\r\n\treturn user;\r\n}\r\n\r\n// import { storageService } from './storage.service.js';\r\n// import axios from 'axios';\r\n\r\n// const STORAGE_KEY = 'user';\r\n\r\n// const BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:3030/api'\r\n\r\n// export const userService = {\r\n//     login,\r\n//     getLoggedinUser,\r\n//     signup\r\n// }\r\n\r\n// function login(credentials) {\r\n//     return axios.post(`${BASE_URL}/login`, credentials).then(res => res.data)\r\n//         .then(user => {\r\n//             storageService.save(STORAGE_KEY, user);\r\n//             return user;\r\n//         })\r\n// }\r\n\r\n// function signup(credentials) {\r\n//     return axios.post(`${BASE_URL}/signup`, credentials).then(res => res.data)\r\n//         .then(user => {\r\n//             storageService.save(STORAGE_KEY, user);\r\n//             return user\r\n//         })\r\n// }\r\n\r\n// function getLoggedinUser() {\r\n//     return storageService.load(STORAGE_KEY);\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}